/*
 * File: app/controller/SteckdosenMaster.js
 *
 * This file was generated by Sencha Architect version 2.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */
var tapEventTime;
var tapOnTimer;
var currentTapLvl=0;
var DISCOVER_MESSAGE_ROOTDEVICE =
    "M-SEARCH * HTTP/1.1\r\n" +
    "ST: urn:schemas-upnp-org:device:InternetGatewayDevice:1\r\n" +
    "MX: 4\r\n" +
    "MAN: \"ssdp:discover\"\r\n" +
    "HOST: 239.255.255.250:1900\r\n\r\n";
var DISCOVER_MESSAGE_IP = "239.255.255.250";
var DISCOVER_MESSAGE_PORT = 1900;
Ext.define('MyApp.controller.SteckdosenMaster', {
    extend: 'Ext.app.Controller',

    config: {
        models: [
            'Steckdose'
        ],
        stores: [
            'Steckdosen'
        ],

        refs: {
            mySteckdosenList: 'steckdosenList'
        },

        control: {
            "steckdosenList": {
                activate: 'onListActivate',
                itemtaphold: 'onSteckdosenListItemTapHold',
                itemtap: 'onSteckdosenListItemTap'
            },
            "dosenList":{
            	itemtap: 'onSwitchSocketTap'
            },
            "steckdosenSearchList":{
            	itemtap: 'onSteckdosenSearchListItemTap'
            },
            "button[itemId=addSteckdose]": {
                tap: 'onAddSteckdoseTap'
            },
            "button[itemId=searchSteckdose]": {
                tap: 'onSearchSteckdoseTap'
            },
		   "button[itemId=save]" : {
		    	tap : 'onSaveSteckdoseTap'
		   },
		   "button[itemId=alleUmschalten]" : {
		    	tap : 'onAlleUmschaltenTap'
		   },
		   "button[itemId=alleEinschalten]" : {
		    	tap : 'onAlleEinschaltenTap'
		   },
		   "button[itemId=alleAusschalten]" : {
		    	tap : 'onAlleAusschaltenTap'
		   },
		   "#ext-button-1" : {
		   		tap : 'onBackButtonTap'
		   }
        }
    },

    onListActivate: function(container, newActiveItem, oldActiveItem, eOpts) {
        console.log('Main container is active');
        Ext.getStore('Steckdosen').load();
    },

    onSteckdosenListItemTapHold: function(view, index, target, record, event) {
    	tapEventTime = new Date();
    	var editForm = Ext.getCmp('menuTapHold');
    	if(!editForm){
	        editForm = Ext.widget("menuTapHold");
		}
        editForm.showBy(target);
        //Action: Button Tap Edit -> Anzeige Bearbeitungsview
        editForm.down("button[itemId=edit]").on("tap",
	        function(){
	        	console.log('Bearbeiten Klick');
			    steckdosenForm = Ext.Viewport.down('steckdosenEdit');
			    if(!steckdosenForm){
			   		steckdosenForm = Ext.widget("steckdosenEdit");
			   	}
            	steckdosenForm.setRecord(record);
            	steckdosenForm.showBy(target);
            	editForm.destroy();
	        }
	    );
	    //Action: Button Tap Delete -> Löschen des Listenelements
        editForm.down("button[itemId=delete]").on("tap",
        	function(){
        		editForm.destroy();
        		Ext.Msg.confirm("Sicherheitsabfrage","Sind Sie sicher das Element zu entfernen?", function(antwort){
        			if(antwort=='yes'){
        				var store = Ext.getStore('Steckdosen');
		            	store.remove(store.getById(record.getId()));
		            	Ext.getStore('Steckdosen').sync();
        			}
        		});
        	}
        );
    },

    onAddSteckdoseTap: function(button, e, eOpts) {
        var steckdosenForm = Ext.Viewport.down("steckdosenEdit");
        //create the steckdosen edit window if it doesn't exists
        if(!steckdosenForm){
            steckdosenForm = Ext.widget("steckdosenEdit");
        } 
        steckdosenForm.reset();
        steckdosenForm.showBy(button);
    },
    
    onSearchSteckdoseTap: function(button, e, eOpts) {
    	var networkState = navigator.network.connection.type;
	    if(networkState == Connection.WIFI){
	    	var tempStore = Ext.getStore('TempSteckdosen');
	    		tempStore.removeAll();
	    	var ListPanel = Ext.Viewport.down('steckdosenSearch');
	    	if(!ListPanel){
	    		ListPanel = Ext.widget("steckdosenSearch");
	    	}
	        ListPanel.showBy(button);
	    	cordova.exec(function(succ){
	    				tempStore.removeAll();
	    				alert(succ);
						var steckdosenArray = succ.split(";");
						for(var i in steckdosenArray){
						    var currentSteckdose = steckdosenArray[i];
							var respond = currentSteckdose.split("\n");
		                	var name = respond[0];
		                	var mac = respond[1];
		                	var version = respond[2];
		                	var httpPort = respond[3];
		                	var internalIp = respond[4];
		                	var externalIp = null;
		                	cordova.exec(
		                		function(succ2){
		                			var result = succ2.split(":");
									DELIVERY_PATH = result[0];
									ROUTER_IP = result[1];
									ROUTER_PORT = result[2];
		                			var SOAP_ACTION = "urn:schemas-upnp-org:service:WANIPConnection:1#GetExternalIPAddress";
				                	var body = 	
										 "<?xml version='1.0' encoding='utf-8'?>"
										+"<s:Envelope s:encodingStyle='http://schemas.xmlsoap.org/soap/encoding/' xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'>"
										+"<s:Body>"
										+ "<u:GetExternalIPAddress xmlns:u='urn:schemas-upnp-org:service:WANIPConnection:1'>"
										+ "</u:GetExternalIPAddress>"
										+"</s:Body>"
										+"</s:Envelope>";
									  	  
									var header = 
										 "POST " + DELIVERY_PATH + " HTTP/1.1\n"
										+"Host: "+ROUTER_IP+":"+ROUTER_PORT+"\r\n"
										+"SOAPACTION: "+ SOAP_ACTION +"\r\n"
										+"Content-Length: " + body.length +"\r\n"
										+"Content-Type: text/xml; charset='utf-8'\r\n"
										+"\r\n";
										
									cordova.exec(
				                		function(succ3){
				                			var e = succ3.match(/<NewExternalIPAddress[^>]*>.*<\/NewExternalIPAddress[^>]*>/gi);
					  						for(var j=0;j<e.length;++j){
					  							externalIp = e[j].match(/\d*[.]\d*[.]\d*[.]\d*/);
					  						}
					  	                	tempStore.add({
						                		name: name,
						                		httpPort: httpPort,
						                		internalIp: internalIp,
						                		externalIp: externalIp,
						                		mac: mac,
						                		version: version
						                	});
				                		},
				                		function(err3){
				                			console.log(err3);
				                			Ext.Msg.alert('ExternalIp Error','Es gab leider ein Problem beim Abfragen der Externen IP');
				                			tempStore.add({
						                		name: name,
						                		httpPort: httpPort,
						                		internalIp: internalIp,
						                		externalIp: externalIp,
						                		mac: mac,
						                		version: version
						                	});
				                		},
				                		"HttpController", 
				 						"sendMessage",
				 						[header,body,ROUTER_IP,ROUTER_PORT]
				                	);
		                		},
		                		function(err2){},
		                		"UPnPController", 
		 						"getRouterInfo",
		 						[DISCOVER_MESSAGE_ROOTDEVICE,DISCOVER_MESSAGE_IP,DISCOVER_MESSAGE_PORT]
		                	);
						}
                     },
                     function(err){
                     	console.log(err);
                     	
                     }, "UdpController", "sendBroadcastMessage",
                     ["D","255.255.255.255",30303]
     		);
	    }else{
	    	Ext.Msg.alert('Suchen einer Steckdose im Netzwerk','Diese Funktion ist nur im Wifi-Netzwerk verf&uumlgbar.',Ext.emptyFn);
	    }
    },
    
    onSteckdosenSearchListItemTap:function(view, index, target, record, event) {
    	var steckdosenStore = Ext.getStore('Steckdosen');
    	steckdosenStore.add(record);
    	var tempSteckdosenStore = Ext.getStore('TempSteckdosen');
    	if(tempSteckdosenStore.getCount() > 1){
    		Ext.Msg.confirm("Weiter ?","M&oumlchten Sie noch weitere Dosen aus der Suche hinzuf&uumlgen?", function(antwort){
        			if(antwort=='no'){
        				view.up('panel').hide();
        			}
        		});
    	}
    },
    
    onSaveSteckdoseTap: function(button, e, eOpts) {
		console.log('Button Click for Save');
		var form = button.up('panel');
		var record = form.getRecord();
		var values = form.getValues();
		console.log(values);
		if(!record){
			var newRecord = new MyApp.model.Steckdose(values);
			newRecord.setDirty();
		   	Ext.getStore('Steckdosen').add(newRecord);
		}
		else {
			record.set(values);
		}
		form.destroy();
		Ext.getStore('Steckdosen').sync();
    },
    
    onSteckdosenListItemTap: function(view, index, target, record, event) {
		console.log(record);
    	if (!tapEventTime || (new Date() - tapEventTime > 1000)) {
    		currentTapLvl += 1;
    		tapEventTime = null;
		   	Ext.getCmp("addSteckdose").hide();
		   	Ext.getCmp("searchSteckdose").hide();
			var dosenPanel = Ext.widget('dosenPanel');
			dosenPanel.config.title = record.data.name;
			dosenPanel.config.internalIp = record.data.internalIp;
			dosenPanel.config.externalIp = record.data.externalIp;
			dosenPanel.config.name = record.data.name;
			dosenPanel.config.httpPort = record.data.httpPort;
			dosenPanel.config.typ = record.data.typ;
			
			if(Ext.getStore(record.data.name)){
				var store = Ext.getStore(record.data.name);
			}else{
				var store = Ext.create('Ext.data.Store', {
			        model: 'MyApp.model.Dose',
			        storeId: record.data.name,
			        autoLoad: true,
			        proxy: {
			            type: 'localstorage'
			        }
				});
			}
			var anzahlDosen 	= 0;
			var anzahlIo 		= 0;
			var blockedDosen 	= 0;
			switch(record.data.typ){
					case "Home":
						anzahlDosen = 3;
						blockedDosen = 1;
						break;
					case "Pro":
					case "ADV":
						anzahlDosen = 8;
						break;
					case "HUT":
					case "IO":
						anzahlDosen = 8;
						anzahlIo = 8;
						break;
					default:
						anzahlDosen = 8;
						break;
			}
			for(var i=1;i<=anzahlDosen;i++){
				if(i<=blockedDosen){
					store.add({
			    		id: 'on',
			    		idName: 'Dose On',
			    		name: 'Dosenname',
			    		status_url: 'img/power_on.png'
					});
					blockedDosen -= 1;
					i = 0;
				}else{
					store.add({
			    		id: i,
			    		idName: 'Dose '+i,
			    		name: 'Dosenname',
			    		status_url: 'img/power_off.png'
					});
				}
			}
			dosenPanel.down('dosenList').setStore(store);
		  	view.up('navigationview').push(dosenPanel);
		  	
		  	
		}
    },
    
    onBackButtonTap: function(button){
    	currentTapLvl -= 1;
    	if(currentTapLvl <= 0){
    		Ext.getCmp("addSteckdose").show();
	   		Ext.getCmp("searchSteckdose").show();
	   	}
    },
    onSwitchSocketTap: function(view, index, target, record, event){
    	if(!tapOnTimer){
    		if(index==0){
    			Ext.Msg.alert('Nicht m&ouml;glich', 'Steckdose 1 kann nicht geschaltet werden.\nSie ist dauerhaft an.');
    		}else{
				console.log("Switch Socket");
				console.log(record);
				index = index - 1 ; // Socket 1 refers as 'F0'
				console.log(index);
				xhttp=new XMLHttpRequest();
	
				var OPEN = 'http://192.168.178.117/ctrl.htm';
			
				// Send switch request to the socket
				xhttp.open('POST',OPEN,false);
				xhttp.setRequestHeader("Content-type","text/plain");
				xhttp.setRequestHeader("Authorization","Basic " + Base64.encode('admin:anel'));
				xhttp.send('F' + index + '=Switch');
				
				// Get status
				OPEN = 'http://192.168.178.117/strg.cfg';
				xhttp.open('GET',OPEN,false);
				xhttp.setRequestHeader("Authorization","Basic " + Base64.encode('admin:anel'));
				xhttp.send("");
				var state = xhttp.responseText.split(";")[20+index];
				if(state==0){
					record.set('status_url','img/power_off.png');
				} else if (state==1){
					record.set('status_url','img/power_on.png');
				} else {
					Ext.Msg.alert('Fehler', 'Der Status der Steckdose konnte nicht abgefragt werden.\nBitte stellen Sie sicher, dass Sie mit dem Internet verbunden sind.')
				}
    		}
		}
		tapOnTimer = false;
    },
    onAlleUmschaltenTap: function(button){
    	alert('onAlleUmschaltenTap');
		alert(
			'internalIp: ' + button.up('container').config.internalIp +
			'\nexternalIp: ' + button.up('container').config.externalIp +
			'\nname: ' + button.up('container').config.name +
			'\nhttpPort: ' + button.up('container').config.httpPort
		);
    },
    onAlleEinschaltenTap: function(button){
    	alert('onAlleEinschaltenTap');
    },
    onAlleAusschaltenTap: function(button){
    	alert('onAlleAusschaltenTap');
    },
    onBackup: function(button){
       	xhttp=new XMLHttpRequest();

		var OPEN = 'http://192.168.1.9/dd.htm?DD2';
	
		xhttp.open('POST',OPEN,false);
		xhttp.setRequestHeader("Content-type","text/plain");
		xhttp.setRequestHeader("Authorization","Basic " + Base64.encode('admin:anel'));
		xhttp.send('TN=Bla');
		alert(xhttp.responseText + " " + xhttp.status);
    },
    
});