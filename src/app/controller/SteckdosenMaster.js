/*
 * File: app/controller/SteckdosenMaster.js
 *
 * This file was generated by Sencha Architect version 2.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */
var tapEventTime;
var tapOnTimer;
var currentTapLvl=0;
var DISCOVER_MESSAGE_ROOTDEVICE =
    "M-SEARCH * HTTP/1.1\r\n" +
    "ST: urn:schemas-upnp-org:device:InternetGatewayDevice:1\r\n" +
    "MX: 4\r\n" +
    "MAN: \"ssdp:discover\"\r\n" +
    "HOST: 239.255.255.250:1900\r\n\r\n";
var DISCOVER_MESSAGE_IP = "239.255.255.250";
var DISCOVER_MESSAGE_PORT = 1900;

var internalIp = null;
var externalIp = null;
var steckdosenName = null;
var dosenName = null;
var dosenId = null;
var typ = null;
var httpPort = null;
var userName = null;
var password = null;
var timerViewPanel = null;
var requestStatus = null;
var steckdosenIndex = null;
var HOURS = null;
var MINUTES = null;
Ext.define('MyApp.controller.SteckdosenMaster', {
    extend: 'Ext.app.Controller',
    alias: 'widget.steckdosenMaster',

    config: {
        models: [
            'Steckdose'
        ],
        stores: [
            'Steckdosen'
        ],

        refs: {
            mySteckdosenList: 'steckdosenList'
        },

        control: {
            "steckdosenList": {
                activate: 'onListActivate',
                itemtaphold: 'onSteckdosenListItemTapHold',
                itemtap: 'onSteckdosenListItemTap'
            },
            "dosenList":{
            	itemtap: 'onSwitchSocketTap',
            	disclose: 'disclose',
            	load: 'test'
            },
            "steckdosenSearchList":{
            	itemtap: 'onSteckdosenSearchListItemTap'
            },
            "timerList":{
            	itemtap: 'onTimerListItemTap'
            },
            "dataview[itemId=photoList]":{
            	itemtap: 'onPhotoListItemTap'
            },
            "button[itemId=addSteckdose]": {
                tap: 'onAddSteckdoseTap'
            },
            "button[itemId=searchSteckdose]": {
                tap: 'onSearchSteckdoseTap'
            },
		   "button[itemId=save]" : {
		    	tap : 'onSaveSteckdoseTap'
		   },
		   "button[itemId=alleUmschalten]" : {
		    	tap : 'onAlleUmschaltenTap'
		   },
		   "button[itemId=alleEinschalten]" : {
		    	tap : 'onAlleEinschaltenTap'
		   },
		   "button[itemId=alleAusschalten]" : {
		    	tap : 'onAlleAusschaltenTap'
		   },
		   "button[itemId=saveTimer]" : {
		    	tap : 'onSaveTimerButtonTap'
		   },
		   "button[itemId=refreshDosen]" : {
		    	tap : 'onRefreshDosenButtonTap'
		   },
		   "button[itemId=refreshTimer]" : {
		    	tap : 'onRefreshTimerButtonTap'
		   },
		   "image[itemId=imageIcon]" : {
		    	tap : 'onImageIconTap'
		   },
		   "#ext-button-1" : {
		   		tap : 'onBackButtonTap'
		   }
        }
    },

    onListActivate: function(container, newActiveItem, oldActiveItem, eOpts) {
        console.log('Main container is active');
    },

    onSteckdosenListItemTapHold: function(view, index, target, record, event) {
    	tapEventTime = new Date();
		var editForm = Ext.getCmp('menuTapHold');
    	if(!editForm){
	        editForm = Ext.widget("menuTapHold");
		}
        editForm.showBy(target);
        //Action: Button Tap Edit -> Anzeige Bearbeitungsview
        editForm.down("button[itemId=edit]").on("tap",
	        function(){
	        	console.log('Bearbeiten Klick');
			    steckdosenForm = Ext.Viewport.down('steckdosenEdit');
			    if(!steckdosenForm){
			   		steckdosenForm = Ext.widget("steckdosenEdit");
			   	}
            	steckdosenForm.setRecord(record);
            	steckdosenForm.showBy(target);
            	editForm.hide();
	        }
	    );
	    //Action: Button Tap Delete -> Löschen des Listenelements
        editForm.down("button[itemId=delete]").on("tap",
        	function(){
        		editForm.hide();
        		Ext.Msg.confirm("Sicherheitsabfrage","Sind Sie sicher das Element zu entfernen?", function(antwort){
        			if(antwort=='yes'){
        				var store = Ext.getStore('Steckdosen');
		            	store.remove(store.getById(record.getId()));
		            	Ext.getStore('Steckdosen').sync();
        			}
        		});
        	}
        );
    },

    onAddSteckdoseTap: function(button, e, eOpts) {
        var steckdosenForm = Ext.Viewport.down("steckdosenEdit");
        //Erstellen eines SteckdosenEdit Views, wenn er noch nicht existiert
        if(!steckdosenForm){
            steckdosenForm = Ext.widget("steckdosenEdit");
        } 
        steckdosenForm.reset();
        steckdosenForm.showBy(button);
    },
    
    onSearchSteckdoseTap: function(button, e, eOpts) {
    	var networkState = navigator.network.connection.type;
	    if(networkState == Connection.WIFI){
	    	var tempStore = Ext.getStore('TempSteckdosen');
	    		tempStore.removeAll();
	    	var ListPanel = Ext.Viewport.down('steckdosenSearch');
	    	if(!ListPanel){
	    		ListPanel = Ext.widget("steckdosenSearch");
	    	}
	        ListPanel.showBy(button);
	    	cordova.exec(function(succ){
	    				tempStore.removeAll();
						var steckdosenArray = succ.split(";");
						for(var i in steckdosenArray){
						    var currentSteckdose = steckdosenArray[i];
							var respond = currentSteckdose.split("\n");
		                	var steckdosenName = respond[0];
		                	var mac = respond[1];
		                	var version = respond[2];
		                	var httpPort = respond[3];
		                	var internalIp = respond[4];
		                	var externalIp = null;
		                	cordova.exec(
		                		function(succ2){
		                			var result = succ2.split(":");
									DELIVERY_PATH = result[0];
									ROUTER_IP = result[1];
									ROUTER_PORT = result[2];
		                			var SOAP_ACTION = "urn:schemas-upnp-org:service:WANIPConnection:1#GetExternalIPAddress";
				                	var body = 	
										 "<?xml version='1.0' encoding='utf-8'?>"
										+"<s:Envelope s:encodingStyle='http://schemas.xmlsoap.org/soap/encoding/' xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'>"
										+"<s:Body>"
										+ "<u:GetExternalIPAddress xmlns:u='urn:schemas-upnp-org:service:WANIPConnection:1'>"
										+ "</u:GetExternalIPAddress>"
										+"</s:Body>"
										+"</s:Envelope>";
									  	  
									var header = 
										 "POST " + DELIVERY_PATH + " HTTP/1.1\n"
										+"Host: "+ROUTER_IP+":"+ROUTER_PORT+"\r\n"
										+"SOAPACTION: "+ SOAP_ACTION +"\r\n"
										+"Content-Length: " + body.length +"\r\n"
										+"Content-Type: text/xml; charset='utf-8'\r\n"
										+"\r\n";
										
									cordova.exec(
				                		function(succ3){
				                		
				                			var e = succ3.match(/<NewExternalIPAddress[^>]*>.*<\/NewExternalIPAddress[^>]*>/gi);
					  						if(e){
						  						for(var j=0;j<e.length;++j){
						  							externalIp = e[j].match(/\d*[.]\d*[.]\d*[.]\d*/);
						  						}
						  					}
						  					if(externalIp != null){
						  	                	tempStore.add({
							                		name: steckdosenName,
							                		httpPort: httpPort,
							                		internalIp: internalIp,
							                		externalIp: externalIp,
							                		typ: 'Home',
							                		mac: mac,
							                		version: version,
							                		userName: 'user7',
							                		password: 'anel'
							                	});
							                }else if(steckdosenName != null & httpPort != null & internalIp != null & externalIp == null){
							                	tempStore.add({
							                		name: steckdosenName,
							                		httpPort: httpPort,
							                		internalIp: internalIp,
							                		typ: 'Home',
							                		mac: mac,
							                		version: version,
							                		userName: 'user7',
							                		password: 'anel'
							                		
							                	});
							                }
							                
				                		},
				                		function(err3){
				                			console.log(err3);
				                			Ext.Msg.alert('ExternalIp Error','Es gab leider ein Problem beim Abfragen der Externen IP');
				                			tempStore.add({
						                		name: steckdosenName,
						                		httpPort: httpPort,
						                		internalIp: internalIp,
						                		typ: 'Home',
						                		mac: mac,
						                		version: version,
						                		userName: 'user7',
						                		password: 'anel'
						                	});
				                		},
				                		"HttpController", 
				 						"sendMessage",
				 						[header,body,ROUTER_IP,ROUTER_PORT]
				                	);
		                		},
		                		function(err2){
                                         console.log(err2);
                                         Ext.Msg.alert('UPnP Problem','Es gab leider ein Problem mit dem UPnP Service.');
                                         tempStore.add({
                                                       name: steckdosenName,
                                                       httpPort: httpPort,
                                                       typ: 'Home',
                                                       internalIp: internalIp,
                                                       mac: mac,
                                                       version: version,
                                                       userName: 'user7',
                                                       password: 'anel'
                                                       });
                                         
                                         
                                },
		                		"UPnPController", 
		 						"getRouterInfo",
		 						[DISCOVER_MESSAGE_ROOTDEVICE,DISCOVER_MESSAGE_IP,DISCOVER_MESSAGE_PORT]
		                	);
						}
                     },
                     function(err){
                     	console.log(err);
                     }, "UdpController", "sendBroadcastMessage",
                     ["D","255.255.255.255",30303]
     		);
	    }else{
	    	Ext.Msg.alert('Suchen einer Steckdose im Netzwerk','Diese Funktion ist nur im Wifi-Netzwerk verf&uumlgbar.',Ext.emptyFn);
	    }
    },
    
    onSteckdosenSearchListItemTap:function(view, index, target, record, event) {
    	var steckdosenStore = Ext.getStore('Steckdosen');
    	steckdosenStore.add(record);
    	steckdosenStore.sync();
    	var tempSteckdosenStore = Ext.getStore('TempSteckdosen');
    	if(tempSteckdosenStore.getCount() > 1){
    		Ext.Msg.confirm("Weiter ?","M&oumlchten Sie noch weitere Dosen aus der Suche hinzuf&uumlgen?", function(antwort){
        			if(antwort=='no'){
        				view.up('panel').hide();
        			}
        		});
    	}else{
    		view.up('panel').hide();
    	}
    },
    
    onSaveSteckdoseTap: function(button, e, eOpts) {
		console.log('Button Click for Save new Steckdose');
		var form = button.up('panel');
		var record = form.getRecord();
		var values = form.getValues();
		console.log(values);
		if(!record){
			var newRecord = new MyApp.model.Steckdose(values);
			newRecord.setDirty();
		   	Ext.getStore('Steckdosen').add(newRecord);
		}
		else {
			record.set(values);
		}
		form.hide();
		Ext.getStore('Steckdosen').sync();
    },
    
    onSteckdosenListItemTap: function(view, index, target, record, event) {
		console.log(record);
    	if (!tapEventTime || (new Date() - tapEventTime > 1000)) {
    		currentTapLvl += 1;
    		tapEventTime = null;
			var dosenPanel = Ext.widget('dosenPanel');
			dosenPanel.config.title = record.data.name;
			internalIp = record.data.internalIp;
			externalIp = record.data.externalIp;
			steckdosenName = record.data.name;
			httpPort = record.data.httpPort;
			typ = record.data.typ;
			userName = record.data.userName;
			password = record.data.password;
			steckdosenIndex = 'S'+record.id; 
			var store = null;
			if(Ext.getStore(steckdosenIndex)){
				store = Ext.getStore(steckdosenIndex);
			}else{
				store = Ext.create('Ext.data.Store', {
			        model: 'MyApp.model.Dose',
			        storeId: steckdosenIndex,
			        autoLoad: true,
			        autoSync: true,
			        proxy: {
			            type: 'localstorage',
			            id: steckdosenIndex
			        }
				});
			}

			var dosenInfo = this.getDosenInfo(typ);
			var anzahlDosen = dosenInfo.split(":")[0];
			var blockedDosen = dosenInfo.split(":")[1];
			anzahlDosen = parseInt(anzahlDosen);
			blockedDosen = parseInt(blockedDosen);
			store.removeAll();
			for(var i=1;i<=anzahlDosen;i++){
				if(i<=blockedDosen){
					store.add({
			    		id: 0,
			    		idName: 'DoseOn',
			    		name: 'Dose On',
			    		status_url: 'img/power_on.png'
					});
					blockedDosen -= 1;
					i = 0;
				}else{
					var img = localStorage.getItem("Photo"+steckdosenIndex+i);
					if(!img)img = 'img/socket_icon.png';			
					store.add({
			    		id: i,
			    		idName: 'Dose'+i,
			    		name: 'Dosenname',
			    		status_url: img,
			    		disabled: 0
					});
					
				}
			}
			
			store.sort([{property: 'id', direction:'ASC'}]);
			store.sync();
			dosenPanel.down('dosenList').setStore(store);

			var ip = null;
			if(externalIp){
				ip = externalIp;
			}else{
				ip = internalIp;
			}
			ip = ip.toString();
			var dosenInfo = this.getDosenInfo(typ);
			var anzahlDosen = dosenInfo.split(":")[0];
			this.read_rel(ip, userName, password,  steckdosenIndex, anzahlDosen);
			if(requestStatus == 200){
			  	view.up('navigationview').push(dosenPanel);
			  	view.up('navigationview').getNavigationBar().getBackButton().setText("Home");
			  	Ext.getCmp("refreshDosen").show();
			  	Ext.getCmp("addSteckdose").hide();
			   	Ext.getCmp("searchSteckdose").hide();
		   	}
		}
    },
    onTimerListItemTap: function(view, index, target, record, event){
    	if(!MINUTES){
    		MINUTES = [];
	    	for (var j = 0; j < 60; j++) {
	            var text;
	            text = (j < 10) ? ('0' + j) : j; //Add leading zero
	            MINUTES.push({text:text, value:j});
	        }
        }
        
        if(!HOURS){
        	HOURS = [];
	      	for (var j = 0; j < 24; j++) {
	            var text;
	            text = (j < 10) ? ('0' + j) : j; //Add leading zero
	            HOURS.push({text:text, value:j});
	        }
	    }
	    
    	editForm = Ext.create('Ext.picker.Picker',{
    	        doneButton: {
            		docked: 'right',
            		text: 'annehmen'
       			 },
       			cancelButton: {
       				text: 'abbrechen',
       				docket: 'left'
       			},
       			modal: true,
       			hideOnMaskTap: true,
       			scrollable: false,
       			draggable: false,
       			scroll: false,
    			slots: [
		            {
		                xtype: 'pickerslot',
		                name: 'startTimeHours',
		                itemId: 'startTimeHours',
		                align: 'right',
		                title: 'H',
		                data: HOURS
		            },
		            {
		                xtype: 'pickerslot',
		                name: 'seperator',
		                align: 'center',
		                title: ' ',
		                data: [
		                    {
		                        text: ':',
		                        value: ':'
		                    }
		                ]
		            },
		            {
		                xtype: 'pickerslot',
		                name: 'startTimeMinutes',
		                itemId: 'startTimeMinutes',
		                align: 'left',
		                title: 'm',
		                data: MINUTES
		            },
					{
		                xtype: 'pickerslot',
		                name: 'endTimeHours',
		                align: 'right',
		                title: 'H',
		                data: HOURS
		            },
		            {
		                xtype: 'pickerslot',
		                name: 'seperator',
		                align: 'center',
		                title: ' ',
		                data: [
		                    {
		                        text: ':',
		                        value: ':'
		                    }
		                ]
		            },
		            {
		                xtype: 'pickerslot',
		                name: 'endTimeMinutes',
		                itemId: 'endTimeMinutes',
		                align: 'left',
		                title: 'm',
		                data: MINUTES
		            }		            		            
        		],
        		toolbar: {
		            xtype: 'toolbar',
		            docked: 'bottom',
		            items: [
		                {
		                    xtype: 'container',
		                    docked: 'bottom',
		                    layout: {
		                        type: 'hbox',
		                        pack: 'justify'
		                    },
		                    defaults: {
								xtype: 'checkboxfield',
								labelAlign:'top',
								flex:1,
							},
		                    items: [  
		                    	{label:'Mo', itemId:'Mo'},{label:'Di', itemId:'Di'},{label:'Mi', itemId:'Mi'},{label:'Do', itemId:'Do'},{label:'Fr', itemId:'Fr'},{label:'Sa', itemId:'Sa'},{label:'So', itemId:'So'}                 
		                    ]
		                },
		                {
		                	xtype: 'checkboxfield',
		                	labelAlign: 'left',
		                	label: 'aktiv',
		                	itemId: 'aktiv',
		                	docked: 'left'
		                }
		            ]
		        }
    	});
    	
    	editForm.on('change', function(picker, button){
    		var startTimeHours = picker.getValue()['startTimeHours'];
    		var startTimeMinutes = picker.getValue()['startTimeMinutes'];
    		
    		var endTimeHours = picker.getValue()['endTimeHours'];
    		var endTimeMinutes = picker.getValue()['endTimeMinutes'];
    		
    		var startTime = ((startTimeHours < 10) ? ('0' + startTimeHours) : startTimeHours) +':'+ ((startTimeMinutes < 10) ? ('0' + startTimeMinutes): startTimeMinutes); //Add leading zero
    		var endTime = ((endTimeHours < 10) ? ('0' + endTimeHours) : endTimeHours) +':'+ ((endTimeMinutes < 10) ? ('0' + endTimeMinutes): endTimeMinutes); //Add leading zero
    	
    		record.set({startTime:startTime});
    		record.set({endTime:endTime});
    		
    		var days = record.data.days;

    		if(!picker.down('#Mo').isChecked()){
				record.set({MO:'noWdhDay'});
				days = days.replace('1','');
    		}else{
    			record.set({MO:'wdhDay'});
    			days = days.replace('1','');
    			days = days + '1';
    		}
    		
       		if(!picker.down('#Di').isChecked()){
				record.set({DI:'noWdhDay'});
				days = days.replace('2','');
    		}else{
    			record.set({DI:'wdhDay'});
    			days = days.replace('2','');
    			days = days + '2';
    		}
    		
    		if(!picker.down('#Mi').isChecked()){
				record.set({MI:'noWdhDay'});
				days = days.replace('3','');
    		}else{
    			record.set({MI:'wdhDay'});
    			days = days.replace('3','');
    			days = days + '3';
    		}
    		
    		if(!picker.down('#Do').isChecked()){
				record.set({DO:'noWdhDay'});
				days = days.replace('4','');
    		}else{
    			record.set({DO:'wdhDay'});
    			days = days.replace('4','');
    			days = days + '4';
    		}
    		
    		if(!picker.down('#Fr').isChecked()){
				record.set({FR:'noWdhDay'});
				days = days.replace('5','');
    		}else{
    			record.set({FR:'wdhDay'});
    			days = days.replace('5','');
    			days = days + '5';
    		}
    		
    		if(!picker.down('#Sa').isChecked()){
				record.set({SA:'noWdhDay'});
				days = days.replace('6','');
    		}else{
    			record.set({SA:'wdhDay'});
    			days = days.replace('6','');
    			days = days + '6';
    		}
    		
    		if(!picker.down('#So').isChecked()){
				record.set({SO:'noWdhDay'});
				days = days.replace('7','');
    		}else{
    			record.set({SO:'wdhDay'});
    			days = days.replace('7','');
    			days = days + '7';
    		}
    		record.set({days:days});
    		
    		if(!picker.down('#aktiv').isChecked()){
    			record.set({checked:'unchecked'});
    		}else{
    			record.set({checked:'checked'});
    		}
    		
    		Ext.getStore(steckdosenIndex+"D"+dosenId).sync();
    	});
    	var startTime = (record.data.startTime).split(':');
    	var endTime = (record.data.endTime).split(':');
    	editForm.setValue({startTimeHours:parseInt(startTime[0])});
    	editForm.setValue({startTimeMinutes:parseInt(startTime[1])});
    	editForm.setValue({endTimeHours:parseInt(endTime[0])});
    	editForm.setValue({endTimeMinutes:parseInt(endTime[1])});
    	
    	editForm.down('#Mo').setChecked(false);
    	editForm.down('#Di').setChecked(false);
    	editForm.down('#Mi').setChecked(false);
    	editForm.down('#Do').setChecked(false);
    	editForm.down('#Fr').setChecked(false);
    	editForm.down('#Sa').setChecked(false);
    	editForm.down('#So').setChecked(false);
    	
    	var days = (record.data.days).split('');	
    	for(var i in days){
    		var day = days[i];
    		switch(day){
    			case "1":
    				editForm.down('#Mo').setChecked(true);
    				break;
    			case "2":
    				editForm.down('#Di').setChecked(true);
    				break;
    			case "3":
    				editForm.down('#Mi').setChecked(true);
    				break;
    			case "4":
    				editForm.down('#Do').setChecked(true);
    				break;
    			case "5":
    				editForm.down('#Fr').setChecked(true);
    				break;
    			case "6":
    				editForm.down('#Sa').setChecked(true);
    				break;
    			case "7":
    				editForm.down('#So').setChecked(true);
    				break;
    		}
    	}
    	// Checkbox-Zustand von der Liste in die Auswahl übernehmen
	    if(record.data.checked == 'checked'){
			editForm.down('#aktiv').setChecked(true);
		}else{
			editForm.down('#aktiv').setChecked(false);
		}
    	
    	//Anzeigen der Auswahl
    	editForm.show();
    },    
    onBackButtonTap: function(button){
    	currentTapLvl -= 1;
    	if(currentTapLvl <= 0){
    		Ext.getCmp("addSteckdose").show();
	   		Ext.getCmp("searchSteckdose").show();
	   		Ext.getCmp("refreshDosen").hide();
	   		Ext.getCmp("refreshTimer").hide();
	   	}
	   	if(currentTapLvl == 1) {
	   		Ext.getCmp("refreshDosen").show();
	   		Ext.getCmp("refreshTimer").hide();
	   		this.onRefreshDosenButtonTap();
	   	}
	   	
    },
    onSwitchSocketTap: function(view, index, target, record, event){
    	if(!tapOnTimer && event.getTarget('.dosenliste')){
    		if(index==0 && typ == 'Home'){
    			Ext.Msg.alert('Nicht m&ouml;glich', 'Steckdose 1 kann nicht geschaltet werden.\nSie ist dauerhaft an.');
    		}else{
				var ip = null;
				if(externalIp){
					ip = externalIp;
				}else{
					ip = internalIp;
				}
				ip = ip.toString();
				console.log("Switch Socket " + index);
				// Set status
				var indexArray = new Array();
				if(record.data.disabled == 0){
					indexArray[0]=record.data.id;
					this.set_rel(indexArray,ip, userName,password);
				}
				
				var dosenInfo = this.getDosenInfo(typ);
				var anzahlDosen = dosenInfo.split(":")[0];

				// Get status
				this.read_rel(ip,userName,password,steckdosenIndex,anzahlDosen);
    		}
           }else{
           	   if(index==0 && typ == 'Home'){
           	   		Ext.Msg.alert('Nicht m&ouml;glich', 'Es k&oumlnnen keine Einstellungen an Steckdose 1 vom Typ Home vorgenommen werden.');
           	   }else{
		           currentTapLvl += 1;
		           Ext.getCmp("refreshDosen").hide();
		           Ext.getCmp("refreshTimer").show();
		           
		           var timerView = Ext.widget('timer');
		           dosenName = record.data.name;
		           dosenId   = record.data.id;
		           timerView.config.title = dosenName;
		           timerViewPanel = timerView;
		           timerView.down('textfield[itemId=dosenName]').setValue(record.data.name);
		           timerView.down('image[itemId=imageIcon]').setSrc(record.data.status_url);
		           var timerStore = Ext.create('Ext.data.Store', {
		                                            model: 'MyApp.model.Timer',
		                                            storeId: steckdosenIndex+"D"+dosenId,
		                                            autoLoad: true,
		                                            proxy: {
		                                                type: 'localstorage',
		                                                id: 'id'
		                                            }
		                                       });
		           timerView.down('list').setStore(timerStore);
		           Ext.getCmp('DosenList').up('navigationview').push(timerView);
		           this.checkDosenTimer();
		   		}
           }
		tapOnTimer = false;
    },
    onAlleUmschaltenTap: function(button){
		this.buttonDosenPanelTap(button,'s');
    },
    onAlleEinschaltenTap: function(button){
    	this.buttonDosenPanelTap(button,'1');
    },
    onAlleAusschaltenTap: function(button){
    	this.buttonDosenPanelTap(button,'0');
    },
    getDosenInfo: function(typ){
    		var anzahlDosen 	= 0;
			var anzahlIo 		= 0;
			var blockedDosen 	= 0;
			switch(typ){
					case "Home":
						anzahlDosen = 3;
						blockedDosen = 1;
						break;
					case "Pro":
					case "ADV":
						anzahlDosen = 8;
						break;
					case "HUT":
					case "IO":
						anzahlDosen = 8;
						anzahlIo = 8;
						break;
					default:
						anzahlDosen = 8;
						break;
			}
			return anzahlDosen+":"+blockedDosen;
    },
    read_rel: function(ip,user,pass, steckdosenId, anzahlDosen){
		xhttp=new XMLHttpRequest();
	
		var OPEN = 'http://' + ip + '/strg.cfg?Auth:'+ user+pass 
		// z.B. "http://net-control/strg.cfg?Auth:user7anel"
	
		xhttp.open('GET',OPEN,false);
		xhttp.onreadystatechange=function(){
		   	requestStatus = xhttp.status;
		}
		xhttp.send("");
		
		var Strg_Var = xhttp.responseText.split(";");
		
		if(Strg_Var[58]=='end') // Prüft ob die Übertragung vollständig ist. 
		{
			var Geraetename 	= Strg_Var[0];
			var Hostname 	= Strg_Var[1];
			var IP 			= Strg_Var[2];
			var Maske 		= Strg_Var[3];
			var Gateway 	= Strg_Var[4];
			var MAC 		= Strg_Var[5];
			var Port 		= Strg_Var[6];
			
			var Temperatur 	= Strg_Var[7];
			var	Typ 		= Strg_Var[8];
			
			var Rel_Name = new Array();
			var Rel_Stand = new Array();
			var Rel_Dis = new Array();
			var Rel_Info = new Array();
			var Rel_TK = new Array();
			var store = Ext.getStore(steckdosenId);
			for(i=0;i<anzahlDosen;i++)
			{
				Rel_Name[i] 	= Strg_Var[10+i];
				Rel_Stand[i] 	= Strg_Var[20+i];
				Rel_Dis[i] 		= Strg_Var[30+i];
				Rel_Info[i] 	= Strg_Var[40+i];
				Rel_TK[i] 		= Strg_Var[50+i];
				var index = store.find('id',i+1);
				var element = store.getAt(index);
				element.set('name',Rel_Name[i]);
				element.set('status',Rel_Stand[i]);
				element.set('disabled',Rel_Dis[i])
				
			}
			console.log('Relais &Uumlbertragung vollst&aumlndig.');
		}
		else Ext.Msg.alert('Verbindungsprobleme!');
    },
    set_rel: function(DosenIndexArray, ip, user, pass){
		for(var i in DosenIndexArray){
			console.log((DosenIndexArray[i])+ " wird geschaltet");
			xhttp=new XMLHttpRequest();
		
			var OPEN = 'http://' + ip + '/ctrl.htm?Auth:' + user + pass;
			// z.B. "http://net-control/ctrl.htm?Auth:user7anel"
		
			xhttp.open('POST',OPEN,false);
			xhttp.setRequestHeader("Content-type","text/plain");
			xhttp.send("F"+(DosenIndexArray[i]-1)+"=S");
		}
	},
	buttonDosenPanelTap: function(button,task){
		var ip = null;
		if(externalIp){
			ip = externalIp;
		}else{
			ip = internalIp;
		}
		ip = ip.toString();
		var indexArray = new Array();
		var anzahlDosen = this.getDosenInfo(typ).split(':')[0];
		var store = Ext.getStore(steckdosenIndex);
		for(var i=0;i<anzahlDosen;i++){
			var index = store.find('id',i+1);
			var element = store.getAt(index);
			switch(task){
				case '0':
					if(element.get('status') == 1 && element.get('disabled') == 0){
						indexArray.push(i+1);
					}
					break;
				case '1':
					if(element.get('status') == 0 && element.get('disabled') == 0){
						indexArray.push(i+1);
					}
					break;
				case 's':
					if(element.get('disabled') == 0){
						indexArray.push(i+1);
					}
					break;
			}
		}
		this.set_rel(indexArray, ip, userName, password);
		this.read_rel(ip,userName,password, steckdosenIndex, anzahlDosen);
	},
	disclose: function(list, record, node, index, event, eOpts){
        return true;
	},
    checkDosenTimer: function(){
    	var ip = null;
		if(externalIp){
			ip = externalIp;
		}else{
			ip = internalIp;
		}
		ip = ip.toString();
    	var header =
			"GET /dd.htm?DD" + dosenId + " HTTP/1.1\r\n"
			+"Host: " + ip + "\r\n"
			+"Connection: keep-alive\r\n"
			+"Authorization: Basic " + Base64.encode(userName+":"+password) + "\r\n"
			+"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
			+"User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31\r\n"
			+"Referer: http://" + ip + "\r\n"
			+"Accept-Encoding: gzip,deflate,sdch\r\n"
			+"Accept-Language: de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4\r\n"
			+"Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3;\r\n\r\n";
		var that = this;	
		cordova.exec(
			function(succ){
				that.processTimerResult(succ);
			},
			function(err){
				console.log("Error bei HTTPController sendMessage: "+err);
			},
			"HttpController",
			"sendMessage",
			[header,'',ip,httpPort]
		);
    },
    onSaveTimerButtonTap: function(button){
		var timerStore = Ext.getStore(steckdosenIndex+"D"+dosenId);

		dosenName = Ext.getCmp('dosenName').getValue();
		var body = "TN="+dosenName;
		for(var i = 1; i <= timerStore.getCount(); i++){
			var index = timerStore.find('id',i);
			var timer = timerStore.getAt(index)
			var startTime = timer.data.startTime;
			var endTime = timer.data.endTime;
			var days = timer.data.days;
			var checked = timer.data.checked;
			if(checked=="checked"){
				checked=("&T0"+(i-1))+"=on";
			}else{
				//no parameter set if socket is unset
				checked="";
			}
			body += checked+("&T1"+(i-1))+"="+days+("&T2"+(i-1))+"="+escape(startTime)+("&T3"+(i-1))+"="+escape(endTime);
		}
		//Checkbox für Sperren der Dosen abrufen
        sperren = (Ext.getCmp('sperren').isChecked())?"&TH=on":"";
        
        //Radiobox für Stromausfallzustand abrufen
        TF = Ext.ComponentQuery.query('radiofield[name=TF]');
        TF = (TF[0].isChecked())?"&TF=e":(TF[1].isChecked())?"&TF=w":(TF[2].isChecked())?"&TF=a":"";
		
		//Standard Body Abschluss setzen
		body += sperren+TF+"&TS=speichern";
		var ip = null;
		if(externalIp){
			ip = externalIp;
		}else{
			ip = internalIp;
		}
		ip = ip.toString();
		var header =
			"POST /dd.htm HTTP/1.1\r\n"
			+"Host: "+ip+"\r\n"
			+"Connection: keep-alive\r\n"
			+"Content-Length: " + body.length + "\r\n"
			+"Cache-Control: max-age=0\r\n"
			+"Authorization: Basic " + Base64.encode(userName+":"+password) + "\r\n"
			+"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
			+"Origin: "+ip+"\r\n"
			+"User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31\r\n"
			+"Content-Type: application/x-www-form-urlencoded\r\n"
			+"Referer: http://"+ip+"/dd.htm?DD" + dosenId + "\r\n"
			+"Accept-Encoding: gzip,deflate,sdch\r\n"
			+"Accept-Language: de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4\r\n"
			+"Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3\r\n\r\n";
		var that = this;
		cordova.exec(
			function(succ){
				Ext.Msg.alert('Erfolgreich','Die Einstellungen wurden erfolgreich gespeichert!');
				that.processTimerResult(succ);
			},
			function(err){
				alert(err);
			},
			"HttpController",
			"sendMessage",
			[header, body, ip, httpPort]
		);
    },
    processTimerResult: function(respond){
    	var timerStore = Ext.getStore(steckdosenIndex+"D"+dosenId);
		
		var e = respond.match(/.*<html>/gi);
		var domText = respond.replace(e,"<html>");
		var doc = document.implementation.createHTMLDocument("example");
		doc.documentElement.innerHTML = domText;
		dosenName = doc.getElementsByName("TN")[0].getAttribute("value");
		Ext.getCmp("navigationview").getNavigationBar().setTitle(dosenName);
		Ext.getCmp("dosenName").setValue(dosenName);
		var parameterPerDose = 4;
		var maxTimerAnzahl = 10;
		var bezeichner = "T";
		
		//Checkbox für Sperren der Dosen setzen
		if(doc.getElementsByName("TH")[0].hasAttribute("checked")){
        	Ext.getCmp('sperren').setChecked(true);
        }else{
        	Ext.getCmp('sperren').setChecked(false);
        }
        
        //Radiobox für Stromausfallzustand setzen
        TF = Ext.ComponentQuery.query('radiofield[name=TF]');
        if(doc.getElementsByName("TF")[0].checked)
        	TF[0].setChecked(true);
        if(doc.getElementsByName("TF")[1].checked)
        	TF[1].setChecked(true);
        if(doc.getElementsByName("TF")[2].checked)
        	TF[2].setChecked(true);
				
		for(var i = 0; i < maxTimerAnzahl; i++){
			var checked = null;
			var days = null;
			var startTime = null;
			var endTime = null;
			
			for(var j = 0; j < parameterPerDose;j++){
				switch(j){
					case 0:
						checked = doc.getElementsByName((bezeichner + j ) + i )[0].hasAttribute("checked");
						if(checked){checked = 'checked'}else{checked = 'unchecked'};
						break;
					case 1:
						days = doc.getElementsByName((bezeichner + j) + i )[0].getAttribute("value"); 
						break;
					case 2:
						startTime = doc.getElementsByName((bezeichner + j) + i )[0].getAttribute("value"); 
						break;
					case 3:
						endTime = doc.getElementsByName((bezeichner + j) + i )[0].getAttribute("value"); 
						break;
				}
			}
			
			//Format der Wiederholen an Store anpassen
			var MO = DI = MI = DO = FR = SA = SO = 'noWdhDay';
			var daysNumbers = days;				
			var days = days.split('');
			for(var k in days){
				var day = days[k];
				switch(day){
					case "1":
						MO = "wdhDay";
						break;
					case "2":
						DI = "wdhDay";
						break;
					case "3":
						MI = "wdhDay";
						break;
					case "4":
						DO = "wdhDay";
						break;
					case "5":
						FR = "wdhDay";
						break;
					case "6":
						SA = "wdhDay";
						break;
					case "7":
						SO = "wdhDay";
						break;
					default:
						break;
				}
			}
			timerStore.add({
			    id: (i+1), 
			    name: 'Timer '+(i+1),
			    MO: MO,
			    DI: DI,
			    MI: MI,
			    DO: DO,
			    FR: FR,
			    SA: SA,
			    SO: SO,
			    days: daysNumbers,
			    startTime: startTime, 
			    endTime: endTime, 
			    checked: checked,
			});
			timerStore.sort([{property: 'id', direction:'ASC'}]);
		}
    },
    onRefreshDosenButtonTap: function(button){
		var ip = null;
		if(externalIp){
			ip = externalIp;
		}else{
			ip = internalIp;
		}
		ip = ip.toString();
		var anzahlDosen = this.getDosenInfo(typ).split(':')[0];
    	this.read_rel(ip, userName, password,  steckdosenIndex, anzahlDosen);
    },
    onRefreshTimerButtonTap: function(button){
    	this.checkDosenTimer();
    },
    onImageIconTap: function(element){
		photoPanel = Ext.getCmp('photoPanel');
		if(!photoPanel){
			photoPanel = Ext.widget('photoPanel');
		}
		photoPanel.showBy(element);
    },
    onPhotoListItemTap: function(view, index, target, record, event){
    	timerViewPanel.down('image[itemId=imageIcon]').setSrc(record.data.photo);
    	view.up('photoPanel').hide();
    	var store = Ext.getStore(steckdosenIndex);
    	var index = store.find('id',dosenId);
		var element = store.getAt(index);
		element.data.status_url = record.data.photo;
		localStorage.setItem("Photo"+steckdosenIndex+dosenId,record.data.photo);
    },
    test: function(){
    	alert('hoi');
    }
});