/*
 * File: app/controller/SteckdosenMaster.js
 *
 * This file was generated by Sencha Architect version 2.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */
var tapEventTime;
var tapOnTimer;
var currentTapLvl=0;
var DISCOVER_MESSAGE_ROOTDEVICE =
    "M-SEARCH * HTTP/1.1\r\n" +
    "ST: urn:schemas-upnp-org:device:InternetGatewayDevice:1\r\n" +
    "MX: 4\r\n" +
    "MAN: \"ssdp:discover\"\r\n" +
    "HOST: 239.255.255.250:1900\r\n\r\n";
Ext.define('MyApp.controller.SteckdosenMaster', {
    extend: 'Ext.app.Controller',

    config: {
        models: [
            'Steckdose'
        ],
        stores: [
            'Steckdosen'
        ],

        refs: {
            mySteckdosenList: 'steckdosenList'
        },

        control: {
            "steckdosenList": {
                activate: 'onListActivate',
                itemtaphold: 'onListItemTapHold',
                itemtap: 'onShowDosenPanel'
            },
            "#DosenList":{
            	itemtap: 'onSwitchSocket'
            },
            "button[itemId=addSteckdose]": {
                tap: 'onAddSteckdose'
            },
            "button[itemId=searchSteckdose]": {
                tap: 'onSearchSteckdose'
            },
		   "button[itemId=save]" : {
		    	tap : 'onSaveSteckdose'
		   },
		   "#ext-button-1" : {
		   		tap : 'onBackButtonTap'
		   }
        }
    },

    onListActivate: function(container, newActiveItem, oldActiveItem, eOpts) {
        console.log('Main container is active');
        Ext.getStore('Steckdosen').load();
    },

    onListItemTapHold: function(view, index, target, record, event) {
    	tapEventTime = new Date();
    	var editForm = Ext.getCmp('menuListItem');
    	console.log(record.get('mySteckdoseKey'));
    	console.log(record.get('Id'));
    	console.log(index);
    	console.log(record.getId());
    	if(!editForm){
	        editForm = Ext.widget("menuTapHold");
		}
        editForm.showBy(target);
        //Action: Button Tap Edit -> Anzeige Bearbeitungsview
        editForm.down("button[itemId=edit]").on("tap",
	        function(){
	        	console.log('Bearbeiten Klick');
			    steckdosenForm = Ext.Viewport.down('steckdosenEdit');
			    if(!steckdosenForm){
			   		steckdosenForm = Ext.widget("steckdosenEdit");
			   	}
            	steckdosenForm.setRecord(record);
            	steckdosenForm.showBy(target);
            	editForm.destroy();
	        }
	    );
	    //Action: Button Tap Delete -> Löschen des Listenelements
        editForm.down("button[itemId=delete]").on("tap",
        	function(){
        		console.log(record);
            	var store = Ext.getStore('Steckdosen');
            	store.remove(store.getById(record.getId()));
            	Ext.getStore('Steckdosen').sync();
            	editForm.destroy();
        	}
        );
    },

    onAddSteckdose: function(button, e, eOpts) {
        var steckdosenForm = Ext.Viewport.down("steckdosenEdit");
        //create the steckdosen edit window if it doesn't exists
        if(!steckdosenForm){
            steckdosenForm = Ext.widget("steckdosenEdit");
        } 
        steckdosenForm.reset();
        steckdosenForm.showBy(button);
    },
    
    onSearchSteckdose: function(button, e, eOpts) {
    	var networkState = navigator.network.connection.type;
	    if(networkState == Connection.WIFI){
	    	cordova.exec(function(succ){
						var respond = succ.split("\n");
					    steckdosenForm = Ext.Viewport.down('steckdosenEdit');
					    if(!steckdosenForm){
					   		steckdosenForm = Ext.widget("steckdosenEdit");
					   	}
	                	var name = respond[0];
	                	var internalIp = respond[4];
	                	cordova.exec(function(succ){alert(succ);},function(err){alert(err);},"UPnPController","getRouterInfo",[DISCOVER_MESSAGE_ROOTDEVICE,"239.255.255.250",1900]);
	                	steckdosenForm.getComponent('name').setValue(name);
	                	steckdosenForm.getComponent('internalIp').setValue(internalIp);
	                	steckdosenForm.showBy(button);
                     },
                     function(err){
                     	alert(err);
                     }, "UdpController", "sendBroadcastMessage",
                     ["D","255.255.255.255",30303]
     		);
	    }else{
	    	Ext.Msg.alert('Suchen einer Steckdose im Netzwerk','Diese Funktion ist nur im Wifi-Netzwerk verf&uumlgbar.',Ext.emptyFn);
	    }
    },
    
    onSaveSteckdose: function(button, e, eOpts) {
		console.log('Button Click for Save');
		var form = button.up('panel');
		var record = form.getRecord();
		var values = form.getValues();
		console.log(values);
		if(!record){
			var newRecord = new MyApp.model.Steckdose(values);
			newRecord.setDirty();
		   	Ext.getStore('Steckdosen').add(newRecord);
		}
		else {
			record.set(values);
		}
		form.destroy();
		Ext.getStore('Steckdosen').sync();
    },
    
    onShowDosenPanel: function(view, index, target, record, event) {
		console.log(record);
    	if (!tapEventTime || (new Date() - tapEventTime > 1000)) {
    		currentTapLvl += 1;
    		tapEventTime = null;
		   	Ext.getCmp("addSteckdose").hide();
		   	Ext.getCmp("searchSteckdose").hide();
			var dosenPanel = Ext.widget('dosenPanel');
			dosenPanel.config.title = record.data.name;
			var store = Ext.create('Ext.data.Store', {
			        model: 'MyApp.model.Dose',
			        storeId: 'Dosen',
			        autoLoad: true,
			        data: [
				    	{
				    		id:'1',
				    		idName: 'Dose 1',
					        name: 'Lampe',
					        status_url: 'img/power_on.png'
				    	}, {
				    		id:'2',
				    		idName: 'Dose 2',
				    		name: 'Netzwerk',
				    		status_url: 'img/power_on.png'
				    	}, {
				    		id:'3',
				    		idName: 'Dose 3',
				    		name: 'Netzwerk',
				    		status_url: 'img/power_on.png'
				    	}, {
				    		id:'4',
				    		idName: 'Dose 4',
				    		name: 'Netzwerk',
				    		status_url: 'img/power_on.png'
				    	}
					],
			        proxy: {
			            type: 'memory'
			        }
			});
			store.add({
				    		id:'5',
				    		idName: 'Dose 5',
				    		name: 'Bla',
				    		status_url: 'img/power_off.png'
				    	});
			dosenPanel.down('#DosenList').setStore(store);
		  	view.up('navigationview').push(dosenPanel);
		  	
		  	
		}
    },
    
    onBackButtonTap: function(button){
    	currentTapLvl -= 1;
    	if(currentTapLvl <= 0){
    		Ext.getCmp("addSteckdose").show();
	   		Ext.getCmp("searchSteckdose").show();
	   	}
    },
    onSwitchSocket: function(view, index, target, record, event){
    	if(!tapOnTimer){
    		if(index==0){
    			Ext.Msg.alert('Nicht m&ouml;glich', 'Steckdose 1 kann nicht geschaltet werden.\nSie ist dauerhaft an.');
    		}else{
				console.log("Switch Socket");
				console.log(record);
				index = index - 1 ; // Socket 1 refers as 'F0'
				console.log(index);
				xhttp=new XMLHttpRequest();
	
				var OPEN = 'http://192.168.178.117/ctrl.htm';
			
				// Send switch request to the socket
				xhttp.open('POST',OPEN,false);
				xhttp.setRequestHeader("Content-type","text/plain");
				xhttp.setRequestHeader("Authorization","Basic " + Base64.encode('admin:anel'));
				xhttp.send('F' + index + '=Switch');
				
				// Get status
				OPEN = 'http://192.168.178.117/strg.cfg';
				xhttp.open('GET',OPEN,false);
				xhttp.setRequestHeader("Authorization","Basic " + Base64.encode('admin:anel'));
				xhttp.send("");
				var state = xhttp.responseText.split(";")[20+index];
				if(state==0){
					record.set('status_url','img/power_off.png');
				} else if (state==1){
					record.set('status_url','img/power_on.png');
				} else {
					Ext.Msg.alert('Fehler', 'Der Status der Steckdose konnte nicht abgefragt werden.\nBitte stellen Sie sicher, dass Sie mit dem Internet verbunden sind.')
				}
    		}
		}
		tapOnTimer = false;
    },
    onBackup: function(button){
       	xhttp=new XMLHttpRequest();

		var OPEN = 'http://192.168.1.9/dd.htm?DD2';
	
		xhttp.open('POST',OPEN,false);
		xhttp.setRequestHeader("Content-type","text/plain");
		xhttp.setRequestHeader("Authorization","Basic " + Base64.encode('admin:anel'));
		xhttp.send('TN=Bla');
		alert(xhttp.responseText + " " + xhttp.status);
    }
    
});